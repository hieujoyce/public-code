#include <iostream>
#include <vector>
#include <bits/stdc++.h>

using namespace std;

void dfs(int visited[], int index, vector<int> vec[], vector<int>& result) {
    visited[index] = 1;
    result.push_back(index);
    for(int i = 0; i < vec[index].size(); i++) {
        if(visited[vec[index][i]] == 0) {
            dfs(visited, vec[index][i], vec, result);
        }
    }
}

int getIndex(vector<int> v, int K) {
    auto it = find(v.begin(), v.end(), K);
    if (it != v.end()) {
        int index = it - v.begin();
        return index;
    }
    return -1;
}

int main() {
    int t, tmp;
    cin >> t;
    for(int k = 0; k < t; k++) {
        int n;
        cin >> n;
        vector<int> vec[n];
        vector<int> result;
        for(int i = 0; i < n; i++) {
            int m;
            cin >> m;
            for(int j = 0; j < m; j++) {
                cin >> tmp;
                tmp--;
                vec[i].push_back(tmp);   
            }
        }
        int visited[n];
        for(int j = 0; j < n; j++) {
            visited[j] = 0;
        }
        for(int i = 0; i < n; i++) {
            if(visited[i] == 0) { 
                dfs(visited, i, vec, result);      
            }
        }
        for(int i = 0; i < n; i++) {
            printf("%3d", getIndex(result, i) + 1);
        }
        // int index = 1;
        // for(int i = 0; i < vec[index].size(); i++) {
        //     printf("%3d", vec[index][i]);
        // }
        cout << endl;
    }

    return 0;
}