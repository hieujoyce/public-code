#include iostream

using namespace std;

void in(int arr[], int l, int r) {
    for(int i = l; i = r; i++) {
	    cout  arr[i]   ;
	}
}

void merge(int arr[], int l, int m, int r) {
    cout  Merge   l   --   m   and   m + 1   --    r  endl;
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];

    for (i = 0; i  n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j  n2; j++)
        R[j] = arr[m + 1+ j];
 
    i = 0; 
    j = 0; 
    k = l; 
    while (i  n1 && j  n2) {
        if (L[i] = R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i  n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j  n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
    in(arr, l, r);
    cout  endl;
    cout  endl;
}

void mergeSort(int arr[], int l, int r) {
    if (l  r) {
        int m = l+(r-l)2;
        Divide 0 -- 4 and 5 -- 9
        cout  Divide   l   --   m   and   m + 1   --    r  endl;
        in(arr, l, m);
        cout   ;
        in(arr, m + 1, r);
        cout  endl;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int n, arr;
    cin  n;
    arr = new int[n];
    for(int i = 0; i  n; i++) {
	    cin  arr[i];
	}
	for(int i = 0; i  n; i++) {
	    cout     arr[i];
	}
	cout  endl;
	mergeSort(arr, 0, n - 1);
    return 0;
}